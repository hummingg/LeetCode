/*
 * @lc app=leetcode.cn id=921 lang=cpp
 *
 * [921] 使括号有效的最少添加
 */
#include <iostream>
#include <vector>
#include <iterator>
#include <string>
using namespace std;
template <class T> std::ostream& operator<< (std::ostream& out, const std::vector<T>& v) {
    if (!v.empty()) {
        out << '[';
        std::copy(v.begin(), v.end(), std::ostream_iterator<T>(out, ", "));
        out << "]";
    }
    return out;
}
// @lc code=start
class Solution {
public:
    // 100 60;
    int minAddToMakeValid(string s) {
        string stk;
        stk.push_back(s[0]); // 充当括号栈的字符串，front是栈底
        // cout << to_string(s[0]) << endl;    // ( -> 40
        int size = s.size();
        for(int i = 1; i < size; ++i){
            if(!stk.empty() && stk.back()=='(' && s[i]==')'){
                stk.pop_back();
            }else{
                stk.push_back(s[i]);
            }
        }
        return stk.size();
    }
};
// @lc code=end
int main(){
    Solution s;
    // vector<int> v = {1, 2};
    string str = "(()((()(()()))))((()(()()))()(()(()))((((()((()))()())((()))())((()()(()((()((())(()())))(()()(()((()()())()()((((())(())()))())((()()(()((()))())()(()())()(()((()(()()))(()((()()(()()(())))(())((()()))))))())(((())))))()))()(((())((())))()(((()((())))))(())((()))((((()))()))((())())))))()()))(((()())())(()(()))))))((()((()))()()())())))())()))(((())(())))()(()()))()()()(((((())(()))(()((()(())))))(()(()))))()()()(((()))))))(()(())())(()(()))())())(()()))))()(((((()(()((()()((()()(())))(((((())((()((()(((()))))()((((()(()(((()))((((()()()(())((()(()))()))())))())))(()((()(())()()(((()(((())()()(()()(())((()()))))))(()())))()(()))(()((())())(((()()()((()((())))(((()(()()))))))()()))((())))((())()()((((())(()(((((((()(((()))())())(()()))(())()((()(()()(((((()()(())))()(((())()(((((()((()(((((((((()()))((())))((((()()(()))(()(()()))())()((((())(())))))(()(()(()()()((((()(())))()()(((())()()))(((()())(()))())())))()(()()(((()((()(()(()((()()(()))())((())((()))))((((()()))((()()))((()((()(";
    cout << s.minAddToMakeValid(str) << endl;
    return 0;
}
/*
""(((""
""(()((()(()()))))((()(()()))()(()(()))((((()((()))()())((()))())((()()(()((()((())(()())))(()()(()((()()())()()((((())(())()))())((()()(()((()))())()(()())()(()((()(()()))(()((()()(()()(())))(())((()()))))))())(((())))))()))()(((())((())))()(((()((())))))(())((()))((((()))()))((())())))))()()))(((()())())(()(()))))))((()((()))()()())())))())()))(((())(())))()(()()))()()()(((((())(()))(()((()(())))))(()(()))))()()()(((()))))))(()(())())(()(()))())())(()()))))()(((((()(()((()()((()()(())))(((((())((()((()(((()))))()((((()(()(((()))((((()()()(())((()(()))()))())))())))(()((()(())()()(((()(((())()()(()()(())((()()))))))(()())))()(()))(()((())())(((()()()((()((())))(((()(()()))))))()()))((())))((())()()((((())(()(((((((()(((()))())())(()()))(())()((()(()()(((((()()(())))()(((())()(((((()((()(((((((((()()))((())))((((()()(()))(()(()()))())()((((())(())))))(()(()(()()()((((()(())))()()(((())()()))(((()())(()))())())))()(()()(((()((()(()(()((()()(()))())((())((()))))((((()()))((()()))((()((()(""
)
)(
*/
